// Returns a random DNA base
const returnRandBase = () => {
  const dnaBases = ['A', 'T', 'C', 'G']
  return dnaBases[Math.floor(Math.random() * 4)] 
}

// Returns a random single stand of DNA containing 15 bases
const mockUpStrand = () => {
  const newStrand = []
  for (let i = 0; i < 15; i++) {
    newStrand.push(returnRandBase())
  }
  return newStrand
}
//console.log('returnRandBase' + returnRandBase);
//console.log('mockUpStrand' + mockUpStrand);

function pAequorFactory(number, dna_array) {
  let specimen = {
    _specimenNum: number,
    _dna: dna_array,
    mutate() {
      let newDna = this._dna.slice();
      let randomBaseIndex = Math.floor(Math.random()
    * this._dna.length);
      newDna[randomBaseIndex] = returnRandBase();
      while(newDna[randomBaseIndex] === this._dna[randomBaseIndex]){
      newDna[randomBaseIndex] = returnRandBase();
      } 
      console.log('this._dna[randomBaseIndex]: ' + this._dna[randomBaseIndex]);
      console.log('newDna[randomBaseIndex]: ' + newDna[randomBaseIndex]);
      return newDna;
      },
    compareDNA(pAequor) {
      let common_DNA = 0; 
      for(let i = 0; i< this._dna.length; i++) {
          if(this._dna[i] === pAequor._dna[i]) {
            common_DNA++;
            console.log('common_DNA ' + common_DNA);
          }
      }
      //console.log(pAequor._dna);
      let dna_percent = Math.floor((common_DNA/this._dna.length) * 100) ;
      console.log(`specimen #1 (${this._dna}) and specimen #2 ${pAequor._dna} have ${dna_percent}% DNA in common`);
       //return 'specimen #1 and specimen #2 have 25% DNA in common
    },
    willLikelySurvive(){
      let nrC = 0;
      let nrG = 0;
      for(let i=0 ; i< this._dna.length; i++){
        if(this._dna[i] === 'C'){
          nrC++;
        }
        if(this._dna[i] === 'G'){
          nrG++;
        }
      }
      //console.log('nrC: ' + nrC);
      //console.log('nrG: ' + nrG);
      let percentC = Math.floor((nrC/this._dna.length) * 100);
      let percentG = Math.floor((nrG/this._dna.length) * 100);
      let pSurvive = Math.floor(((nrG+ nrC)/(percentG + percentG)) *100) ;
      //console.log('percentC: ' + percentC);
      //console.log('percentG: ' + percentG);

      //if(percentC >= 60 || percentG >= 60) {
      if(pSurvive >= 40) {
        //console.log('willLikelySurvive: true');
        return true;
      } else {
       // console.log('willLikelySurvive: false');
        return false;
      }
    },
    complementStrand() {
      let complementaryDna = this._dna.slice();
      for(var i = 0; i < complementaryDna.length; i++) {
        switch(complementaryDna[i]) {
          case 'A':
            complementaryDna[i] = 'T';
            break;
          case 'T':
            complementaryDna[i] = 'A';
            break;
          case 'C':
            complementaryDna[i] = 'G';
            break;
          case 'G':
            complementaryDna[i] = 'C';
            break;
        }
      }
      console.log(complementaryDna);
      return complementaryDna;
    }

  }
  return specimen;
}



function instancespAequor(nrValid) {
      let validpAequor = [];
      let specimenNumber = Math.floor(Math.random());
      while(validpAequor.length < nrValid) {
        let candidate = pAequorFactory(specimenNumber, mockUpStrand());
        //console.log("candidate" + candidate._dna);
        if(candidate.willLikelySurvive()) {
          validpAequor.push(candidate);
          //console.log("candidate valid" + candidate._dna);
        }
      }
      for(var i = 0; i < validpAequor.length; i++) {
        console.log(validpAequor[i]);
      }
    }



/** 
let test = []
console.log("test length :" +test.length);
test.length = 999;
console.log("new test length :" +test.length);
test.push("one");
console.log(" test length after push:" +test.length);
console.log(test[0]);
console.log(test[999]);
**/





let test1 = pAequorFactory(1,mockUpStrand());
//let test2= pAequorFactory(2,mockUpStrand())
//test1.compareDNA(test2);
//test1.willLikelySurvive();

console.log('test1._dna: ' + test1._dna);
test1.complementStrand();
//console.log('_specimenNum: ' + test1._specimenNum);
//console.log('test1.mutate(): ' + test1.mutate());*/

//instancespAequor(30);
